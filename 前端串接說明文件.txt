# Winsurf API 前端串接說明文件

## 基本資訊

- API 基礎路徑: https://0d2f8bryih.execute-api.us-west-2.amazonaws.com/staging
- 前端應用程式 URL: https://main.d37j5zzkd2621x.amplifyapp.com

## 認證相關 API

### 1. OAuth 認證回調

- **URL**: https://0d2f8bryih.execute-api.us-west-2.amazonaws.com/staging/oauth/callback
- **方法**: GET
- **功能**: 處理 Google OAuth 認證回調
- **參數**:
  - code: Google 返回的授權碼 (查詢參數)
- **返回**:
  - 重定向到前端頁面，並附帶令牌和用戶 ID
- **用法注意**:
  - 此端點由 Google OAuth 服務直接調用
  - 成功後會重定向到 https://main.d37j5zzkd2621x.amplifyapp.com/auth-success?token=JWT令牌&userId=用戶ID
  - 失敗後會重定向到 https://main.d37j5zzkd2621x.amplifyapp.com/auth-error?error=錯誤信息
  - 前端需要處理這兩個路由，從 URL 參數中獲取數據

### 2. OAuth 令牌獲取

- **URL**: https://0d2f8bryih.execute-api.us-west-2.amazonaws.com/staging/oauth
- **方法**: POST
- **功能**: 使用授權碼獲取 JWT 令牌
- **請求體**:
  ```json
  {
    "code": "Google返回的授權碼"
  }
  ```
- **返回**:
  ```json
  {
    "token": "JWT令牌",
    "user": {
      "id": "用戶ID",
      "name": "用戶名稱",
      "email": "用戶郵箱",
      "google_id": "Google ID",
      "is_admin": false,
      "created_at": "創建時間",
      "updated_at": "更新時間"
    }
  }
  ```
- **用法注意**:
  - 如果前端已經有授權碼，可以直接調用此 API 獲取令牌
  - 獲取到的令牌需要存儲在本地，用於後續請求的授權

## 商品相關 API

### 1. 獲取所有商品

- **URL**: https://0d2f8bryih.execute-api.us-west-2.amazonaws.com/staging/products
- **方法**: GET
- **功能**: 獲取所有商品列表
- **參數**: 無
- **返回**:
  ```json
  [
    {
      "id": "商品ID",
      "name": "商品名稱",
      "price": 299.99,
      "stock": 100,
      "image_url": "商品圖片URL",
      "created_at": "創建時間",
      "updated_at": "更新時間"
    },
    // 更多商品...
  ]
  ```
- **用法注意**:
  - 此 API 不需要認證，任何人都可以訪問
  - 用於展示商品列表頁面

### 2. 獲取單個商品

- **URL**: https://0d2f8bryih.execute-api.us-west-2.amazonaws.com/staging/products/{id}
- **方法**: GET
- **功能**: 獲取指定 ID 的商品詳情
- **參數**:
  - id: 商品 ID (路徑參數)
- **返回**:
  ```json
  {
    "id": "商品ID",
    "name": "商品名稱",
    "price": 299.99,
    "stock": 100,
    "image_url": "商品圖片URL",
    "created_at": "創建時間",
    "updated_at": "更新時間"
  }
  ```
- **用法注意**:
  - 此 API 不需要認證，任何人都可以訪問
  - 用於展示商品詳情頁面
  - 如果商品不存在，會返回 404 錯誤

### 3. 創建商品 (需要管理員權限)

- **URL**: https://0d2f8bryih.execute-api.us-west-2.amazonaws.com/staging/products
- **方法**: POST
- **功能**: 創建新商品
- **請求頭**:
  - Authorization: Bearer JWT令牌
- **請求體**:
  ```json
  {
    "name": "商品名稱",
    "price": 299.99,
    "stock": 100,
    "image_url": "商品圖片URL"
  }
  ```
- **返回**:
  ```json
  {
    "id": "商品ID",
    "name": "商品名稱",
    "price": 299.99,
    "stock": 100,
    "image_url": "商品圖片URL",
    "created_at": "創建時間",
    "updated_at": "更新時間"
  }
  ```
- **用法注意**:
  - 此 API 需要管理員權限，必須在請求頭中提供有效的 JWT 令牌
  - 如果用戶不是管理員，會返回 403 錯誤
  - 商品 ID 會自動生成，不需要在請求中提供

### 4. 更新商品 (需要管理員權限)

- **URL**: https://0d2f8bryih.execute-api.us-west-2.amazonaws.com/staging/products/{id}
- **方法**: PUT
- **功能**: 更新指定 ID 的商品
- **請求頭**:
  - Authorization: Bearer JWT令牌
- **參數**:
  - id: 商品 ID (路徑參數)
- **請求體**:
  ```json
  {
    "name": "更新後的商品名稱",
    "price": 399.99,
    "stock": 50,
    "image_url": "更新後的商品圖片URL"
  }
  ```
- **返回**:
  ```json
  {
    "id": "商品ID",
    "name": "更新後的商品名稱",
    "price": 399.99,
    "stock": 50,
    "image_url": "更新後的商品圖片URL",
    "created_at": "創建時間",
    "updated_at": "更新時間"
  }
  ```
- **用法注意**:
  - 此 API 需要管理員權限，必須在請求頭中提供有效的 JWT 令牌
  - 如果用戶不是管理員，會返回 403 錯誤
  - 如果商品不存在，會返回 404 錯誤
  - 需要提供完整的商品信息，未提供的字段將被設置為空值

### 5. 刪除商品 (需要管理員權限)

- **URL**: https://0d2f8bryih.execute-api.us-west-2.amazonaws.com/staging/products/{id}
- **方法**: DELETE
- **功能**: 刪除指定 ID 的商品
- **請求頭**:
  - Authorization: Bearer JWT令牌
- **參數**:
  - id: 商品 ID (路徑參數)
- **返回**:
  ```json
  {
    "message": "商品已成功刪除"
  }
  ```
- **用法注意**:
  - 此 API 需要管理員權限，必須在請求頭中提供有效的 JWT 令牌
  - 如果用戶不是管理員，會返回 403 錯誤
  - 如果商品不存在，會返回 404 錯誤
  - 刪除操作不可逆，請謹慎使用

## 其他 API

### 1. 健康檢查

- **URL**: https://0d2f8bryih.execute-api.us-west-2.amazonaws.com/staging/health
- **方法**: GET
- **功能**: 檢查 API 服務是否正常運行
- **參數**: 無
- **返回**:
  ```json
  {
    "status": "ok"
  }
  ```
- **用法注意**:
  - 此 API 不需要認證，任何人都可以訪問
  - 可用於監控系統健康狀態

## 認證流程說明

1. **前端初始化 Google OAuth**:
   - 使用 Google OAuth 客戶端 ID 初始化 OAuth 流程
   - 設置重定向 URI 為 https://0d2f8bryih.execute-api.us-west-2.amazonaws.com/staging/oauth/callback

2. **用戶完成 Google 登入**:
   - Google 會將用戶重定向到回調 URI，並附帶授權碼
   - 後端處理授權碼，生成 JWT 令牌
   - 將用戶重定向回前端，並附帶令牌和用戶 ID

3. **前端存儲令牌**:
   - 從 URL 參數中獲取令牌和用戶 ID
   - 將令牌存儲在本地存儲中（如 localStorage）
   - 使用令牌進行後續的 API 請求

4. **使用令牌訪問受保護的 API**:
   - 在請求頭中添加 Authorization: Bearer JWT令牌
   - 後端驗證令牌並檢查權限
   - 如果令牌有效且權限足夠，則處理請求

## 前端實現建議

### 1. 設置 Google OAuth

```javascript
// 初始化 Google OAuth
function initGoogleOAuth() {
  // 使用您的 Google OAuth 客戶端 ID
  const clientId = '您的Google客戶端ID';
  
  // 設置重定向 URI
  const redirectUri = 'https://0d2f8bryih.execute-api.us-west-2.amazonaws.com/staging/oauth/callback';
  
  // 設置授權範圍
  const scope = 'profile email';
  
  // 構建 OAuth URL
  const authUrl = `https://accounts.google.com/o/oauth2/v2/auth?client_id=${clientId}&redirect_uri=${redirectUri}&response_type=code&scope=${scope}`;
  
  // 重定向到 Google 登入頁面
  window.location.href = authUrl;
}
```

### 2. 處理認證成功

```javascript
// 在 /auth-success 路由中處理認證成功
function handleAuthSuccess() {
  // 從 URL 參數中獲取令牌和用戶 ID
  const urlParams = new URLSearchParams(window.location.search);
  const token = urlParams.get('token');
  const userId = urlParams.get('userId');
  
  // 將令牌和用戶 ID 存儲在本地
  localStorage.setItem('token', token);
  localStorage.setItem('userId', userId);
  
  // 重定向到主頁或其他頁面
  window.location.href = '/';
}
```

### 3. 處理認證錯誤

```javascript
// 在 /auth-error 路由中處理認證錯誤
function handleAuthError() {
  // 從 URL 參數中獲取錯誤信息
  const urlParams = new URLSearchParams(window.location.search);
  const error = urlParams.get('error');
  
  // 顯示錯誤信息
  console.error('認證錯誤:', error);
  
  // 可以在頁面上顯示錯誤信息，並提供重試選項
}
```

### 4. 使用令牌訪問 API

```javascript
// 使用令牌訪問 API
async function fetchWithAuth(url, options = {}) {
  // 從本地存儲中獲取令牌
  const token = localStorage.getItem('token');
  
  // 如果沒有令牌，重定向到登入頁面
  if (!token) {
    window.location.href = '/login';
    return;
  }
  
  // 設置請求頭
  const headers = {
    ...options.headers,
    'Authorization': `Bearer ${token}`,
    'Content-Type': 'application/json',
  };
  
  // 發送請求
  const response = await fetch(url, {
    ...options,
    headers,
  });
  
  // 如果返回 401 或 403，可能是令牌過期或權限不足
  if (response.status === 401 || response.status === 403) {
    // 清除本地存儲中的令牌
    localStorage.removeItem('token');
    localStorage.removeItem('userId');
    
    // 重定向到登入頁面
    window.location.href = '/login';
    return;
  }
  
  return response;
}

// 示例：獲取所有商品
async function getAllProducts() {
  const response = await fetch('https://0d2f8bryih.execute-api.us-west-2.amazonaws.com/staging/products');
  return response.json();
}

// 示例：創建商品（需要管理員權限）
async function createProduct(product) {
  const response = await fetchWithAuth('https://0d2f8bryih.execute-api.us-west-2.amazonaws.com/staging/products', {
    method: 'POST',
    body: JSON.stringify(product),
  });
  return response.json();
}
```

## 注意事項

1. **安全性**:
   - 不要在前端代碼中硬編碼敏感信息，如 API 密鑰
   - 使用 HTTPS 進行所有 API 通信
   - 定期刷新令牌，避免長時間使用同一個令牌

2. **錯誤處理**:
   - 對所有 API 請求進行適當的錯誤處理
   - 顯示用戶友好的錯誤信息
   - 在開發環境中記錄詳細的錯誤信息，便於調試

3. **用戶體驗**:
   - 在 API 請求期間顯示加載指示器
   - 實現適當的緩存策略，減少不必要的 API 請求
   - 提供離線功能，在網絡不可用時仍能使用部分功能

4. **跨域問題**:
   - API 已配置為允許跨域請求，但如果遇到跨域問題，請檢查瀏覽器控制台中的錯誤信息
   - 確保 API Gateway 已正確配置 CORS 設置

5. **部署注意事項**:
   - 在不同環境（開發、測試、生產）中使用不同的 API 端點
   - 確保前端應用程式的重定向 URI 與 Google OAuth 設置一致
   - 定期備份和更新 JWT 密鑰

希望這份文檔能幫助您順利實現前後端的對接。如果有任何問題，請隨時提出。
